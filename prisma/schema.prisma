generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  OUTLOOK
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  password          String
  fullName          String     @map("full_name")
  avatar            String?
  role              UserRole   @default(REGULAR)
  isVerified        Boolean    @default(false) @map("is_verified")
  isTwoFactorEnable Boolean    @default(false) @map("is_two_factor_enable")
  method            AuthMethod
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  companies         Company[]  @relation("UserCompanies")

  accounts Account[]

  @@map("users")
}

model Account {
  id           Int      @id @default(autoincrement())
  type         String
  provider     String
  refreshToken String?  @map("refresh_token")
  accessToken  String?  @map("access_token")
  expiresAt    Int      @map("expires_at")
  userId       Int?     @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model Company {
  id             Int       @id @default(autoincrement())
  name           String    @map("name")
  shortName      String    @map("short_name")
  businessEntity String    @unique @map("business_entity")
  type           String[]  @map("type")
  status         String    @default("active") @map("status")
  address        String?   @map("address")
  userId         Int       @map("user_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  contacts  Contact[]  @relation("CompanyContacts")
  contracts Contract[] @relation("CompanyContracts")
  photos    Photo[]    @relation("CompanyPhotos")
  user      User       @relation("UserCompanies", fields: [userId], references: [id])

  @@map("companies")
}

model Contact {
  id         Int       @id @default(autoincrement())
  lastName   String    @map("last_name")
  firstName  String    @map("first_name")
  patronymic String
  phone      String
  email      String    @unique
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  companies Company @relation("CompanyContacts", fields: [companyId], references: [id])
  companyId Int

  @@map("contacts")
}

model Contract {
  id        Int       @id @default(autoincrement())
  no        String    @map("no")
  issueDate DateTime  @map("issue_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  companies Company @relation("CompanyContracts", fields: [companyId], references: [id])
  companyId Int

  @@map("contracts")
}

model Photo {
  id        Int       @id @default(autoincrement()) @map("id")
  name      String
  filepath  String
  thumbpath String    @map("thumb_path")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  companies Company @relation("CompanyPhotos", fields: [companyId], references: [id])
  companyId Int

  @@map("photos")
}
